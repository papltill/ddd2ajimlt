
module ddd2ajimlt;
create OUT : AJI from IN : DDD;

-- Quick way to check if an element has a specific Stereotype applied
helper context DDD!Element def: hasStereotype(stereotype : String) : Boolean =
	self.getAppliedStereotypes() -> exists(e|e.name=stereotype);

helper context DDD!Element def: noStereotype() : Boolean =
	self.getAppliedStereotypes().size() = 0;

--Can be used if the type of a property is a primitive type from UML (String,Integer,Boolean etc.)
helper context DDD!Property def: isPrimitiveType(type : String): Boolean =
	if self.type.oclIsUndefined() then
		false
			else
				if self.type.oclIsTypeOf(DDD!PrimitiveType) and self.type.name = type then
			true
			else
				false
			endif
		
				endif;

-- retreive the value of the Aggregate Root Property of an Element that has the AggregatePart Stereotype from DDD applied
helper context DDD!Element def: getAggregateRoot() : DDD!Element =
	if self.hasStereotype('AggregatePart')
	then
		self.getValue(self.getAppliedStereotype('RootElement::AggregatePart'),'aggregateRoot')
	else
		self
	endif;

-- Retreive all associations that are added to a class by properties
helper context DDD!Class def: getAllAssocationsFromProperties() : Sequence(DDD!Assocation) =
	self.attribute -> iterate(iter; col: Sequence(DDD!Association) = Sequence{}| 
	col.append(iter.association)
	);

--Retreive the generalization of an Element
helper context DDD!Element def: getGeneralization() : DDD!Class =
	if self.generalization.size() = 0
		then
			OclUndefined
		else
			if(self.generalization.first().general.goUpToElementWithStereotype('BoundedContext').name 
					= self.goUpToElementWithStereotype('BoundedContext').name)
				then
					self.generalization.first().general
				else 
					OclUndefined
				endif
	endif;

-- Check if the generalization of a class has a specific stereotype
helper context DDD!Class def: generalizationHasStereotype(stereotype : String): Boolean =
	if(self.getGeneralization().oclIsUndefined())
		then
			false
		else
			if(self.getGeneralization().hasStereotype(stereotype))
				then
					true
				else
					false
				endif
		endif;

-- Retreive the Bounded Context of a classes generalization
helper context DDD!Class def: generalizationBoundedContext() : DDD!Package =
	if(self.generalizationHasStereotype('Entity'))
		then
			self.getGeneralization().goUpToElementWithStereotype('BoundedContext')
		else
			OclUndefined
	endif;

-- Check if the owning end of a association has a specific stereotype
helper context DDD!Association def: associationOriginHasStereotype(stereotype : String) : Boolean =
	if(self.memberEnd -> notEmpty())
		then
			self.memberEnd.get(1).type.processableAsStereotype(stereotype)
		else
			false
	endif;	

-- Check if an association is a ManyToManyAssociation
helper context DDD!Association def: isManyToManyAssociation() : Boolean =
	if self.memberEnd.size() = 2
		then
			if self.memberEnd.first().upper = -1 and self.memberEnd.get(1).upper = -1
			then
				true
			else
				false
			endif
		else
			false
		endif;

-- Check if an association is a ManyToOneAssociation
helper context DDD!Association def: isManyToOneAssociation() : Boolean =
	if self.memberEnd.size() = 2
		then
			if self.memberEnd.first().upper = 1 and self.memberEnd.get(1).upper = -1
			then
				-- This is a workaround LOG, it debugs and then returns a value, because println throws errors
				('[INFO][DROP] Association between "'+self.memberEnd.first().name+ 
				 '" and "'+self.memberEnd.get(1).name+
				 '" was not converted because there is no corresponding concept in AJIL').debug().expressionValue(true)
			else
				false
			endif
		else
			false
		endif;

-- Returns all objects that were created from all dependencies suppliers
helper context DDD!Package def: getDependenciesToOtherContexts(seq : Sequence(DDD!Class)) : Sequence(DDD!Class) =
	self.getPackagedElementsByType(DDD!Dependency, true) ->
	iterate(iter; col: Sequence(DDD!Class) = Sequence{}|
			if not (iter.supplier.get(0).goUpToElementWithStereotype('BoundedContext').name = iter.client.get(0).goUpToElementWithStereotype('BoundedContext').name)
				then
					col.append(iter.supplier)
				else
					col
				endif	
	);

--Count Dependencies on a Class Element, to find out if a service/repo is referenced from outside of the own BC
helper context DDD!Class def: countDependenciesOnThis() : Boolean =
	self.goUpToElementWithType(DDD!Model).getPackagedElementsByType(DDD!Dependency, true) -> 
	iterate(iter; col: Sequence(DDD!Class) = Sequence{}|
		if((iter.oclIsTypeOf(DDD!Dependency) or iter.oclIsTypeOf(DDD!Usage)) and iter.supplier.get(0).name = self.name)
			then
				if(thisModule.sameBoundedContextNames(iter.supplier.get(0), iter.client.get(0)))
					then
						col.append(iter)
					else
						col
					endif
			else
				col
			endif);

-- Check if two Elements have the same Bounded COntext names
helper def: sameBoundedContextNames(el1 : DDD!Element, el2 : DDD!Element) : Boolean =
	if(el1.goUpToElementWithStereotype('BoundedContext').name = el1.goUpToElementWithStereotype('BoundedContext').name)
		then
			true
		else
			false
	endif;
	
-- Starting from the model, search all abstractions in the whole model that have the element as a client
helper context DDD!Model def: collectAbstractionsWithClient(object : DDD!Class) : Boolean =
	self.getPackagedElementsByType(DDD!Abstraction, false) ->
	iterate(iter; col: Sequence(DDD!Abstraction) = Sequence{}|
		if(iter.client.get(0).name = object.name)
			then
				col.append(iter)
		else
			col
		endif);

-- Starting from the Bounded Context, search all abstractions in the whole model that have the element as a client
helper context DDD!Package def: collectAbstractionsWithClientBC(object : DDD!Class) : Boolean =
	self.getPackagedElementsByType(DDD!Abstraction, false) ->
	iterate(iter; col: Sequence(DDD!Abstraction) = Sequence{}|
		if(iter.client.get(0).name = object.name)
			then
				col.append(iter)
		else
			col
		endif);

-- Get all associations that have the object as one end
helper context DDD!Element def: collectAssociationsWithMemberEnd(object : DDD!Class) : Boolean =
	self.getPackagedElementsByType(DDD!Association, false) ->
	iterate(iter; col: Sequence(DDD!Association) = Sequence{}|
		if(iter.memberEnd.get(1).type.name = object.name)
			then
				col.append(iter)
		else
			col
		endif);

-- Go up to the root using namespace until you hit a specified stereotype, otherwise return undefined
helper context DDD!Element def: goUpToElementWithStereotype (stereotype : String) : DDD!Element =
	if(self.hasStereotype(stereotype))
		then
			self
		else
			if(not self.namespace.oclIsUndefined())
				then
					self.namespace.goUpToElementWithStereotype(stereotype)
				else
					OclUndefined
				endif
		endif;

-- Go up to the root using namespace until you hit a specified type, otherwise return undefined
helper context DDD!Element def: goUpToElementWithType (type : OclType) : DDD!Element =
	if(self.oclIsTypeOf(type))
		then
			self
		else
			if(not self.namespace.oclIsUndefined())
				then
					self.namespace.goUpToElementWithType(type)
				else
					OclUndefined
				endif
		endif;

-- Goes recursively through all packages and collects the elements with specified type
helper context DDD!Element def: getPackagedElementsByType(type : String, kind : Boolean) : Sequence(DDD!Class) =
		self.packagedElement ->
			iterate(iter; col: Sequence(DDD!Element) = Sequence{}|
		if(iter.oclIsTypeOf(type) or (kind and iter.oclIsKindOf(type)))
			then
				col.append(iter)
		else
			if(iter.oclIsTypeOf(DDD!Package))
				then
				col.union(iter.getPackagedElementsByType(type, kind))
			else
				col
			endif
		endif);

-- Goes recursively through all packages and collects the elements with specified type
helper context DDD!Element def: getPackagedElementsByStereoType(stereotype : String) : Sequence(DDD!Class) =
		self.packagedElement ->
			iterate(iter; col: Sequence(DDD!Element) = Sequence{}|
		if(iter.hasStereotype(stereotype))
			then
				col.append(iter)
		else
			if(iter.oclIsTypeOf(DDD!Package))
				then
				col.union(iter.getPackagedElementsByStereoType(stereotype))
			else
				col
			endif
		endif);

-- If no return type is given, take the subject from the owing elements associations, else 
helper context DDD!Operation def: getCorrectSubject() : DDD!Element =
	if(self.type.oclIsUndefined())
		then 
			-- return the end of the first association of the owning object
			if not self.namespace.getAllAssocationsFromProperties().first().oclIsUndefined()
				then
					self.namespace.getAllAssocationsFromProperties().first().memberEnd.first().type
				else
					self.namespace.goUpToElementWithType(DDD!Model).
					collectAssociationsWithMemberEnd(self.namespace).first().memberEnd.get(0).type
			endif
		else
			self.type
	endif;		

-- Checks if a repo or service has dependencies referencing it to check if it can be an interface
helper context DDD!Class def: suitableForInterface() : Boolean =
	if((self.processableAsStereotype('Repository') or self.processableAsStereotype('Service')))
		then
			if(self.countDependenciesOnThis().size() > 0)
				then
					true
				else
					-- This is a workaround LOG, it debugs and then returns a value, because println throws errors
					('[INFO][DROP] "Repository" or "Service" element with name "'+self.name+
					 '" was not converted because there is no corresponding concept in AJIL').debug().expressionValue(false)
				endif
		else 
			false
		endif;

-- workaround method for workaround LOGs, asseses a given value
helper context String def: expressionValue(value : Boolean) : Boolean =
	value;

-- Gets the element that is referenced by a abstract that has the element as a client
helper def: getAbstractFromSharedModel(element : DDD!Element) : DDD!Element =
	if(element.goUpToElementWithStereotype('BoundedContext').oclIsUndefined())
		then
			element.goUpToElementWithType(DDD!Model).collectAbstractionsWithClient(element).first()
		else
			OclUndefined
		endif;

-- Checks if a stereotype is inherited to a class
helper context DDD!Class def: processableAsStereotype(stereotype : String) : Boolean =
	(self.hasStereotype(stereotype) or (self.noStereotype() and self.generalizationHasStereotype(stereotype)));

-- checks if both ends of an association are in one context
helper context DDD!Association def: inOneContext() : Boolean =
	if(not self.memberEnd.first().type.goUpToElementWithStereotype('BoundedContext').oclIsUndefined() 
			and not self.memberEnd.get(1).type.goUpToElementWithStereotype('BoundedContext').oclIsUndefined())
		then
			if(self.memberEnd.first().type.goUpToElementWithStereotype('BoundedContext').name 
					= self.memberEnd.get(1).type.goUpToElementWithStereotype('BoundedContext').name)
				then
					true
				else
					false
				endif
		else
			false
	endif;

-- checks if both ends of an association that is defined by a property are in one context
helper context DDD!Property def: associationInOneBoundedContext() : Boolean =
	if(self.association.oclIsUndefined())
		then
			false
		else
			self.association.inOneContext()
		endif;

-- checks if both ends of an association that is defined by a property are the same
helper context DDD!Property def: associationIsReflexive() : Boolean =
	if(self.association.oclIsUndefined())
		then
			false
		else
			self.association.isReflexive()
		endif;

-- checks if both ends of an association are the same
helper context DDD!Association def: isReflexive() : Boolean =
		(self.memberEnd.first().type = self.memberEnd.get(1).type);

-- checks if the owing element of a property is processable as Entity
helper context DDD!Property def: namespaceTransformableToEntity() : Boolean =
	if(self.namespace.oclIsTypeOf(DDD!Association))
		then
			false
		else
			if(self.namespace.processableAsStereotype('Entity') 
					or self.namespace.processableAsStereotype('ValueObject') 
					or self.namespace.oclIsKindOf(DDD!Enumeration))
				then
					true
				else
					false
			endif
		endif;

rule BoundedContext2MicroServiceAndDataModelWithoutAggregate {
	from
		p : DDD!Package (p.oclIsTypeOf(DDD!Package) 
			and p.hasStereotype('BoundedContext')
			and p.getPackagedElementsByStereoType('AggregateRoot').size() = 0)
	to
		
		fs: AJI!FunctionalServiceT (
			name <- p.name + 'Service',
			domain <- dm,
			providedInterfaces <- p.getPackagedElementsByStereoType('Repository'),
			providedInterfaces <- p.getPackagedElementsByStereoType('Service'),
			serviceDependencies <- p.getDependenciesToOtherContexts()
		),
		
		dm:	AJI!DataModelT (
			name <- p.name + 'Model',
			entities <- p.getPackagedElementsByStereoType('Entity'),
			entities <- p.getPackagedElementsByStereoType('ValueObject'),
			entities <- p.getPackagedElementsByType(DDD!Enumeration, false)
		)
}

rule BoundedContext2MicroServiceAndDataModelWithAggregate {
	from
		p : DDD!Package (p.oclIsTypeOf(DDD!Package) and p.hasStereotype('BoundedContext') 
			and p.getPackagedElementsByStereoType('AggregateRoot').size() > 0)
	to
		
		fs: AJI!FunctionalServiceT (
			name <- p.name + 'Service',
			domain <- dm,
			providedInterfaces <- p.getPackagedElementsByStereoType('Repository'),
			providedInterfaces <- p.getPackagedElementsByStereoType('Service'),
			serviceDependencies <- p.getDependenciesToOtherContexts()
		),
		
		aggRoot: AJI!EntityT(
			name <- 'AbstractAggregateRoot'
			),
			
		aggPart: AJI!EntityT(
			name <- 'AbstractAggregatePart'
			),
		
		dm:	AJI!DataModelT (
			name <- p.name + 'Model',
			entities <- p.getPackagedElementsByStereoType('Entity'),
			entities <- p.getPackagedElementsByStereoType('ValueObject'),
			entities <- p.getPackagedElementsByType(DDD!Enumeration, false),
			entities <- aggRoot,
			entities <- aggPart
		)
}

rule Module2Log{
	from
		old : DDD!Package (old.hasStereotype('Module'))
		
	to	

	do{
		('[INFO][DROP] "Module" element with name "'+old.name+ 
				'" was not converted, because there is no corresponding concept in AJIL').println();
	}	
}

rule Model2System {
	
	from
		up : DDD!Model
	to		
		t: AJI!SystemT (
			name <- up.name,
			services <- up.nestedPackage
		)
}

rule Enum2Entity{
	from
		old : DDD!Enumeration
		
	to
		new : AJI!EntityT(
				name <- old.name,
				attributes <- old.ownedLiteral,
				parent <- old.getGeneralization()
			)
	do{
		('[INFO][DIFF] "Enumeration" element with name "'+old.name+ 
				'" was converted to an EntityT object, because AJIL does not support Enumerations').println();
	}	
}

rule Entity2Entity_AggregateRoot{
	from
		old : DDD!Class ((old.processableAsStereotype('Entity')) and old.processableAsStereotype('AggregateRoot'))
		
	to
		new : AJI!EntityT(
				name <- old.name,
				attributes <- old.attribute,
				relations <- old.getAllAssocationsFromProperties(),
				parent <- thisModule.resolveTemp(old.goUpToElementWithStereotype('BoundedContext'), 'aggRoot'),
				parent <- old.getGeneralization(),
				domainModel <- thisModule.resolveTemp(old.generalizationBoundedContext(), 'dm')
			)
	do{
		if(old.noStereotype()){
			('[INFO][DIFF] Element "'
			+old.name+ '" was converted to an EntityT object with AbstractAggregateRoot as parent,'+
			'because its abstract class is an AggregateRoot and Entity').println();
		}
	}
}


rule Entity2Entity_NoAggregate{
	from
		old : DDD!Class (old.processableAsStereotype('Entity')
			and not (old.processableAsStereotype('AggregateRoot') or old.processableAsStereotype('AggregatePart')))
	to
		new : AJI!EntityT(
				name <- old.name,
				attributes <- old.attribute,
				relations <- old.getAllAssocationsFromProperties(),
				parent <- old.getGeneralization(),
				domainModel <- thisModule.resolveTemp(old.generalizationBoundedContext(), 'dm')
			)
	do{
		if(old.noStereotype()){
			('[INFO][DIFF] Element "'+old.name+ 
					'" was converted to an EntityT object, because its abstract class is an Entity').println();
		}
	}	
}

rule Entity2Entity_AggregatePart{
	from
		old : DDD!Class ((old.processableAsStereotype('Entity')) and old.processableAsStereotype('AggregatePart'))
		
	to
		new : AJI!EntityT(
				name <- old.name,
				relations <- rel,
				relations <- old.getAllAssocationsFromProperties(),
				attributes <- old.attribute,
				parent <- thisModule.resolveTemp(old.goUpToElementWithStereotype('BoundedContext'), 'aggPart'),
				parent <- old.getGeneralization(),
				domainModel <- thisModule.resolveTemp(old.generalizationBoundedContext(), 'dm')
			),
			
			rel : AJI!RelationT(
				name <- 'AggregateRoot',
				target <- old.getAggregateRoot()
			)
	do{
		if(old.noStereotype()){
			('[INFO][DIFF] Element "'+old.name+
					'" was converted to an EntityT object with AbstractAggregatePart as parent,'+
					'because its abstract class is an AggregatePart and Entity').println();
		}
	}
}

rule ValueObject2Entity{
	from
		old : DDD!Class (old.processableAsStereotype('ValueObject') and not old.goUpToElementWithStereotype('BoundedContext').oclIsUndefined())
		
	to
		new : AJI!EntityT(
				name <- old.name,
				attributes <- old.attribute
			)
	do{
		if(old.noStereotype()){
			('[INFO][DIFF] Element "'+old.name+ 
					'" was converted to an EntityT object, because its abstract class is a ValueObject').println();
		}
	}
}

rule SharedModel2Entity{
	from
		old : DDD!Class (old.processableAsStereotype('ValueObject')
			and old.goUpToElementWithStereotype('BoundedContext').oclIsUndefined())
	using{
		abstraction : DDD!Abstraction = thisModule.getAbstractFromSharedModel(old).supplier.get(0);
	}	
	to
		new : AJI!EntityT(
				name <- old.name,
				attributes <- old.attribute,
				domainModel <- thisModule.resolveTemp(abstraction.goUpToElementWithStereotype('BoundedContext'), 'dm'),
				parent <- abstraction
			)
	do{
		if(old.noStereotype()){
			('[INFO][DIFF] Element "'+old.name+ 
					'" was converted to an EntityT object, because its abstract class is a ValueObject').println();
		}
	}
}

rule Property2Attribute_Integer{
	from
		old : DDD!Property (old.isPrimitiveType('Integer')) 
	to	
			new : AJI!IntegerT(
				name <- old.name
			)
	do{
		thisModule.checkStereotypeLossForProperty(old);
	}
}

rule Property2Attribute_String{
	from
		old : DDD!Property (old.isPrimitiveType('String')) 
	to	
			new : AJI!StringT(
				name <- old.name
			)
	do{
		thisModule.checkStereotypeLossForProperty(old);
	}
}

rule Property2Attribute_Float{
	from
		old : DDD!Property (old.isPrimitiveType('Float')) 
	to	
			new : AJI!FloatT(
				name <- old.name
			)
	do{
		thisModule.checkStereotypeLossForProperty(old);
	}
}

rule Property2Attribute_Boolean{
	from
		old : DDD!Property (old.isPrimitiveType('Boolean')) 
	to	
			new : AJI!BooleanT(
				name <- old.name
			)
	do{
		thisModule.checkStereotypeLossForProperty(old);
	}
}

rule Property2Attribute_Undefined{
	from
		old : DDD!Property (old.type.oclIsUndefined()  and not(old.name = 'AggregateRoot'))
		
	to	
			new : AJI!StringT(
				name <- old.name
			)
	do{
		('[INFO][DIFF] "Property" element with name "'+old.name+ 
				'" was converted to a StringT object, '+
				'because underspecified attributes are not supported in AJIL').println();
		thisModule.checkStereotypeLossForProperty(old);
	}	
}

rule EnumerationLiteral2Attribute{
	from
		old : DDD!EnumerationLiteral		
	to	
			new : AJI!StringT(
				name <- old.name
			)
	do{
		('[INFO][DIFF] "EnumerationLiteral" element with name "'+old.name+ 
				'" was converted to a StringT object, because EnumerationLiterals are not a Concept in AJIL').println();
	}
}

rule Property2Attribute_Association{
	from
		old : DDD!Property (not old.association.oclIsUndefined() 
			and not old.associationIsReflexive() and old.associationInOneBoundedContext()
			and old.namespaceTransformableToEntity())
	to	
			new : AJI!EntityT(
				name <- old.name
				-- This should be right, but not sure if EntityT as datatype have a domain Model.
				--domainModel <- thisModule.resolveTemp(old.goUpToElementWithStereotype('BoundedContext'), 'dm')
			)
	do{
		('[INFO][DIFF] "Property" element with name "'+old.name+ 
				'" was converted to a EntityT object, because EntityT is the only complex DataType in AJIL').println();
		thisModule.checkStereotypeLossForProperty(old);
	}
}

rule SuitableRepositoryOrService2ServiceInterface{
	from
		old : DDD!Class (old.suitableForInterface())
	to
		new : AJI!ServiceInterfaceT(
				name <- old.name + 'Interface',
				abilities <- old.ownedOperation
			)

}

--Checking the type with the first characters, because a regex search can be ambigoous with createReader or something
rule Operation2CreateAbility{
	from
		old: DDD!Operation ((old.namespace.hasStereotype('Repository') or old.namespace.hasStereotype('Service')) and
			old.name.substring(1,6) = 'create' and old.namespace.countDependenciesOnThis().size() > 0)
	to
		new : AJI!CreateT( 
				name <- old.name,
				--No way to distinguish between multiple associations on a repo or service
				subject <- old.getCorrectSubject()
			)
	do{
		thisModule.checkStereotypeLossForOperation(old);
	}
}

rule checkStereotypeLossForOperation(old : DDD!Operation){
		do{
			if(old.hasStereotype('Closure')){
				('[INFO][LOSS] "Operation" element with name "'+old.name+ 
						'" did not retain its Stereotype "Closure", '+
						'because there is no corresponding concept in AJIL').println();
			}
			if(old.hasStereotype('ValidatesSpec')){
				('[INFO][LOSS] "Operation" element with name "'+old.name+ 
						'" did not retain its Stereotype "ValidatesSpec",'+
						'because there is no corresponding concept in AJIL').println();
			}
			if(old.hasStereotype('SideEffectFree')){
				('[INFO][LOSS] "Operation" element with name "'+old.name+ 
						'" did not retain its Stereotype "SideEffectFree",'+
						'because there is no corresponding concept in AJIL').println();
			}
	}
}

rule checkStereotypeLossForProperty(old : DDD!Property){
		do{
			if(old.hasStereotype('DefinesIdentity')){
				('[INFO][LOSS] "Property" element with name "'+old.name+ 
						'" did not retain its Stereotype "definesIdentity", '+
						'because there is no corresponding concept in AJIL').println();
			}
	}
}


rule Operation2ReadAbility{
	from
		old: DDD!Operation ((old.namespace.hasStereotype('Repository') or old.namespace.hasStereotype('Service')) and
			(old.name.substring(1,4) = 'find' or old.name.substring(1,4) = 'read' or old.name.substring(1,3) = 'get')
			and old.namespace.countDependenciesOnThis().size() > 0)
	to
		new : AJI!ReadT( 
				name <- old.name,
				--No way to distinguish between multiple associations on a repo or service
				subject <- old.getCorrectSubject()
			)
	do{
		thisModule.checkStereotypeLossForOperation(old);
	}
}

rule Operation2UpdateAbility{
	from
		old: DDD!Operation ((old.namespace.hasStereotype('Repository') or old.namespace.hasStereotype('Service')) and
			old.name.substring(1,6) = 'update' and old.namespace.countDependenciesOnThis().size() > 0)
	to
		new : AJI!UpdateT( 
				name <- old.name,
				--No way to distinguish between multiple associations on a repo or service
				subject <- old.getCorrectSubject()
			)
	do{
		thisModule.checkStereotypeLossForOperation(old);
	}
}

rule Operation2DeleteAbility{
	from
		old: DDD!Operation ((old.namespace.hasStereotype('Repository') or old.namespace.hasStereotype('Service')) and
			(old.name.substring(1,6) = 'delete' or old.name.substring(1,6) = 'remove')
			and old.namespace.countDependenciesOnThis().size() > 0)
	to
		new : AJI!DeleteT( 
				name <- old.name,
				--No way to distinguish between multiple associations on a repo or service
				subject <- old.getCorrectSubject()
			)
	do{
		thisModule.checkStereotypeLossForOperation(old);
	}
}

rule Operation2CustomAbility{
	from
		old: DDD!Operation (old.namespace.hasStereotype('Service') and not
			(old.name.substring(1,6) = 'create' or
				old.name.substring(1,4) = 'find' or old.name.substring(1,4) = 'read' or old.name.substring(1,3) = 'get' or
				old.name.substring(1,6) = 'update'or
				old.name.substring(1,6) = 'delete' or old.name.substring(1,6) = 'remove')	
			and old.namespace.countDependenciesOnThis().size() > 0
		)
	to
		new : AJI!CustomT( 
				name <- old.name,
				--No way to distinguish between multiple associations on a repo or service
				subject <- old.getCorrectSubject()
			)
	do{
		thisModule.checkStereotypeLossForOperation(old);
	}
}


rule EntityAssociation2Relation{
	from
		old : DDD!Association ((old.associationOriginHasStereotype('Entity') 
				or old.associationOriginHasStereotype('ValueObject')) and not old.isManyToManyAssociation() 
			and not old.isManyToOneAssociation() and old.inOneContext() and not old.isReflexive())
		
	to	
			new : AJI!RelationT(
				target <- old.memberEnd.first().type,
				source <- old.memberEnd.get(1).type,
				multiplicity <-  if (old.memberEnd.first().upper = -1) then 'MANY' else 'ONE' endif
			)
}

rule splitManyToManyEntityAssociations{
	from
		old : DDD!Association ((old.associationOriginHasStereotype('Entity')  
				or old.associationOriginHasStereotype('ValueObject') )and old.isManyToManyAssociation() 
				and old.inOneContext() and not old.isReflexive())
	to	
			new : AJI!RelationT(
				target <- old.memberEnd.first().type,
				source <- old.memberEnd.get(1).type,
				multiplicity <- 'MANY'
			),
			
			new2 : AJI!RelationT(
				target <- old.memberEnd.get(1).type,
				source <- old.memberEnd.first().type,
				multiplicity <- 'MANY'
			)
	do{
		('[INFO][DIFF] MANY to MANY association between "'+old.memberEnd.first().name+ 
				'" and "'+old.memberEnd.get(1).name+'" was split into to two ONE to MANY associations').println();	
	}	
}

rule Spec2Log{
	from
		old : DDD!Class (old.processableAsStereotype('Spec'))
		
	to	

	do{
		('[INFO][DROP] "Spec" element with name "'+old.name+ 
				'" was not converted, because there is no corresponding concept in AJIL').println();
	}	
}


